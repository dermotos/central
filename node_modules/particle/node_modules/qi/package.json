{
  "name": "qi",
  "description": "A small DSL for async flow control.",
  "version": "0.0.8",
  "homepage": "http://github.com/TorchlightSoftware/qi",
  "repository": {
    "type": "git",
    "url": "git://github.com/TorchlightSoftware/qi.git"
  },
  "author": {
    "name": "Torchlight Software",
    "email": "info@torchlightsoftware.com",
    "url": "http://torchlightsoftware.com"
  },
  "main": "./dist/qi.js",
  "dependencies": {},
  "devDependencies": {
    "coffee-script": "*",
    "mocha": "*",
    "should": "*"
  },
  "engines": {
    "node": ">= 0.8.4"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/torchlightsoftware/qi/raw/master/LICENSE"
    }
  ],
  "scripts": {
    "test": "mocha"
  },
  "readme": "# Qi\n\nPronounced '[chee](http://en.wikipedia.org/wiki/Qi)'.\n\nA simple DSL for parallel and sequential processing.\n\nIt is simpler and smaller than any other flow control library you will find, and the features are so powerful, it's probably a monad.\n\nIt supports three operations:\n\n* disperse\n* focus\n* channel\n\nFrom these we derive more complex functions for specific use cases:\n\n* map\n* others?\n\n## Installation\n\n```bash\nnpm install qi\nbower install qi\n```\n\n# High Level Operators\n\nThese are convenient functions for common use cases.\n\n## Map\n\nMap over arrays or objects, executing an asynchronous function.\n\n### Example\n\n```coffee-script\nshould = require 'should'\n{map} = require 'qi'\n\nsquareAsync = (n, next) ->\n  next null, n * n\n\ndescribe 'map', ->\n  it 'should process an array', (done) ->\n    map [1, 2, 3], squareAsync, (err, results) ->\n      results.should.eql [1, 4, 9]\n      done()\n\n  it 'should process an object', (done) ->\n    map {a: 1, b: 2, c: 3}, squareAsync, (err, results) ->\n      results.should.eql {a: 1, b: 4, c: 9}\n      done()\n```\n\n# Fundamental Operators\n\nThese are the 3 base operators, from which all others are derived.\n\n## Focus\n\nInitialize it on a target function and you will get a callback constructor.  You may create as many callbacks as you want and pass them to your subtasks.  The target will be called when the subtasks have completed.\n\nIt supports the node convention of (err, data).  If any of your subtasks return results they will be accumulated in an array.  If any return an error, the target will be called immediately with the error, and the results of all further subtasks will be ignored.\n\nYou can pass a 'name' to the callback constructor to assign a name to a particular callback.  If you do so, the results will become an object, with keys corresponding to the names you assigned.\n\n### Example\n\n```coffee-script\nshould = require 'should'\n{focus} = require 'qi'\n\ndescribe 'focus', ->\n  it 'should wait for all callbacks to return', (done) ->\n    cb = focus done\n\n    setTimeout cb(), 1\n    setTimeout cb(), 2\n    setTimeout cb(), 3\n\n  it 'should return all results', (done) ->\n    cb = focus (err, results) ->\n      should.not.exist err\n      results.should.eql [0, 1]\n      done()\n\n    i = 0\n    doStuff = (cb) ->\n      -> cb null, i++\n\n    setTimeout doStuff(cb()), 1\n    setTimeout doStuff(cb()), 2\n```\n\n## Disperse\n\nThis creates a function which when called will pass its args on to multiple child functions.\n\n### Example\n\n```coffee-script\nshould = require 'should'\n{disperse} = require 'qi'\n\ndescribe 'disperse', ->\n  it 'should call all callbacks', ->\n\n    yin = (input) ->\n      input.should.eql 1\n\n    yang = (input) ->\n      input.should.eql 1\n\n    taiji = disperse yin, yang\n    taiji 1\n```\n\n## Channel\n\nThis executes any number of tasks in sequence.\n\n### Example\n\n```coffee-script\nshould = require 'should'\n{channel} = require 'qi'\n\ndescribe 'channel', ->\n  it 'should call multiple functions', (done) ->\n\n    task1 = (arg, next) ->\n      next null, arg * 4\n\n    task2 = (arg, next) ->\n      next null, arg + 2\n\n    final = (err, arg) ->\n      should.not.exist err\n      should.exist arg\n      arg.should.eql 42\n      done()\n\n    sequence = channel(task1, task2)\n    sequence 10, final\n```\n\n# FAQ\n\nQ: Is focus safe to use on a mixture of synchronous and asynchronous subtasks?\n\nA: Yes.  Subtasks return their results on process.nextTick, so as long as you construct all your callbacks synchronously, your results should not be collected prematurely.\n\n## LICENSE\n\n(MIT License)\n\nCopyright (c) 2013 Torchlight Software <info@torchlightsoftware.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/TorchlightSoftware/qi/issues"
  },
  "_id": "qi@0.0.8",
  "dist": {
    "shasum": "175ea7a35f782f14370d902a1d9fe56de2f7802c",
    "tarball": "http://registry.npmjs.org/qi/-/qi-0.0.8.tgz"
  },
  "_from": "qi@*",
  "_npmVersion": "1.3.11",
  "_npmUser": {
    "name": "torchlight",
    "email": "info@torchlightsoftware.com"
  },
  "maintainers": [
    {
      "name": "torchlight",
      "email": "info@torchlightsoftware.com"
    }
  ],
  "directories": {},
  "_shasum": "175ea7a35f782f14370d902a1d9fe56de2f7802c",
  "_resolved": "https://registry.npmjs.org/qi/-/qi-0.0.8.tgz"
}
